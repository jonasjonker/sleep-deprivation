library(Hmisc)
scatter2 = scatter1 + stat_summary(fun.data = "mean_cl_normal", colour = "blue", size=1)
scatter2
scatter3 = scatter2 + theme(bw)
scatter3 = scatter2 + theme_bw()
scatter3 = scatter2 + theme_bw() + title(main = USe of MEME)
scatter3 = scatter2 + theme_bw() + labs(title = "USe of MEME")
scatter3
library(UsingR)
plot = ggplot(galileo, aes(x = init.h, y = h.d))
plot1 = plot + geom_point()
plot1
plot2 = plot1 + geom_line(method = "lm")
plot2 = plot1 + geom_smooth(method = "lm")
plot2
plot2 = plot1 + geom_smooth(method = "lm", se=F,colour = "green")
plot2
plot3 = plot2 + geom_smooth(formula = y~x+I(x^2) )
plot3
plot3 = plot2 + geom_smooth(formula = y~x+I(x^2), method = "lm" )
plot3
plot5 = plot4 + scale_color_manual(name = "LEGEND", values = c("blue" , "purple"))
plot4 = plot3 + labs(title = "meme", xlab = "negers" , ylab = "sos")
plot5 = plot4 + scale_color_manual(name = "LEGEND", values = c("blue" , "purple"))
plot5
plot2 = plot1 + geom_smooth(method = "lm", se=F,colour = "green", aes(colour = "linear"))
plot3 = plot2 + geom_smooth(formula = y~x+I(x^2), method = "lm" )
plot4 = plot3 + labs(title = "meme", xlab = "negers" , ylab = "sos")
plot5 = plot4 + scale_color_manual(name = "LEGEND", values = c("blue" , "purple"))
plot5
plot5 = plot4 + scale_colour_manual(name="Method", values=c("green","blue"))+ xlab("initial height") +ylab("horizontal distance")+labs(title="Galileo data")
plot5
plot2 = plot1 + geom_smooth(formula= y~x, method="lm", se=F, aes(colour="linear"))
plot3 = plot2 + geom_smooth(formula = y~x+I(x^2), method = "lm" )
plot4 = plot3 + labs(title = "meme", xlab = "negers" , ylab = "sos")
plot5 = plot4 + scale_colour_manual(name="Method", values=c("green","blue"))+ xlab("initial height") +ylab("horizontal distance")+labs(title="Galileo data")
plot5
pi
x = seq(from -2pi, to = 2pi, by = 0.01)
x = seq(from -2*pi, to = 2*pi, by = 0.01)
?seq
x = seq(from =-2*pi, to = 2*pi, by = 0.01)
sin = sin(x)
cos = cos(x)
tan = tan(x)
drame = cbind(x,sin,cos,tan)
frame = cbind(x,sin,cos,tan)
View(frame)
View(frame)
plot = ggplot(frame, aes(x = x, y= sin))
frame = data.frame(x,sin,cos,tan)
plot = ggplot(frame, aes(x = x, y= sin))
plot
plot2 = plot + geom_line(sin)
plot2 = plot + geom_line(aes(sin))
plot2
data(diamonds)
head(diamonds)
diamonds_small = select(diamonds, nrow(5000))
?select
diamonds_small = select(diamonds, 5000 )
diamonds_small = filter(diamonds, 5000 )
diamonds_small = diamonds[1000]
diamonds_small = diamonds[5000,]
View(diamonds_small)
View(diamonds_small)
diamonds_small = diamonds[1:5000,]
View(diamonds_small)
View(diamonds_small)
?ifelse
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium", "Above average", "Below average"))
View(diamondsmod)
View(diamondsmod)
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium", "Above average", ifelse(cut=="Very Good","Very Good","Below average"))
View(diamondsmod)
View(diamondsmod)
diamondsmod = mutate(diamonds_small,
diamonds_small = diamonds[1:5000,]
diamondsmod = mutate(diamonds_small,
View(diamondsmod)
View(diamondsmod)
"Very Good","meme"))
diamondsmod = mutate(diamonds_small,
diamondsmod = mutate(diamonds_small,
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme"))
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
diamondsmo = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
View(diamondsmo)
View(diamondsmo)
data(diamonds)
head(diamonds)
diamonds_small = diamonds[1:5000,]
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
diamonds_2 = select(diamondsmod, carat, color, clarity, price, cut_new)
diamonds_2 = select(diamondsmod, carat, color, clarity, price, cut_new)
diamonds_2 = select(diamondsmod, carat, color, clarity, price, cut_new)
diamondsmod$carat
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
diamonds_2 = select(diamondsmod, carat, color, clarity, price, cut_new)
library(openxlsx)
library(devtools)
library(export)
library(afex)
library(car)
library(lattice)
library(MASS)
library(effects)
library(doBy)
library(ggplot2)
library(ggthemes)
library(scales)
library(Rmisc)
library(stats)
library(easyGgplot2)
library(BayesTree)
library(UsingR)
library(Cluster)
library(Robustreg)
library(doBy)
library(reshape)
library(modeest)
library(qcc)
library(grid)
library(Hmisc)
library(tidyverse)
library(dplyr)
library(nycflights13)
diamonds_2 = select(diamondsmod, carat, color, clarity, price, cut_new)
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
diamonds_2 = select(diamondsmod, carat, color, clarity, price, cut_new)
diamonds_2 = select(diamondsmod, carat)
head(diamondsmod)
as.tibble(diamondsmod)
diamonds_2 = select(diamondsmod, carat)
as.tibble(diamondsmod)
diamonds_2 = select(diamondsmod, carat)
x = select(diamondsmod, carat)
x = transmute(diamondsmod, carat)
diamonds_2 = select(diamondsmod, "carat")
x = transmute(diamondsmod, carat, color, clarity, price, cut_new)
View(x)
View(x)
setwd("~/")
wd()
getwd()
write.table(x, file=file.choose(), quote = FALSE,
sep = " ", row.names = FALSE, col.names = TRUE)
x = group_by(diamonds_2, color)
diamonds_2 = transmute(diamondsmod, carat, color, clarity, price, cut_new)
x = group_by(diamonds_2, color)
summarise(diamonds_2, mean(price))
summarise(x, mean(price))
x = group_by(diamonds_2, color, cut_new)
summarise(x, mean(price))
summarise(x, meme = mean(price))
x = group_by(diamonds_2, color, cut_new)
View(x)
View(x)
x = group_by(diamonds_2, color, cut_new)
summarise(x, meme = mean(price))
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
as.tibble(diamonds_2)
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
library(dplyr)
summarise(x, meme = mean(price))
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
detach("package:plyr", unload = TRUE)
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
as.tibble(diamonds_2)
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
as.tibble(diamonds_2)
data(diamonds)
head(diamonds)
diamonds_small = diamonds[1:5000,]
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
diamonds_2 = select(diamondsmod, carat)
diamondsmod$carat
head(diamondsmod)
as.tibble(diamondsmod)
diamonds_2 = transmute(diamondsmod, carat, color, clarity, price, cut_new)
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
as.tibble(diamonds_2)
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
data(diamonds)
head(diamonds)
diamonds_small = diamonds[1:5000,]
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
(dplyr)
(dplyr)
library(dplyr)
library(ggplot2)
data(diamonds)
head(diamonds)
diamonds_small = diamonds[1:5000,]
diamondsmod = mutate(diamonds_small, cut_new = ifelse(cut=="Ideal" | cut=="Premium","Above average", ifelse(cut=="Very Good", "Very Good","meme")))
diamonds_2 = select(diamondsmod, carat)
as.tibble(diamondsmod)
diamonds_2 = transmute(diamondsmod, carat, color, clarity, price, cut_new)
x = group_by(diamonds_2, cut_new)
summarise(x, meme = mean(price))
x = group_by(diamonds_2,color, cut_new)
summarise(x, meme = mean(price))
result = summarise(x, meme = mean(price))
combine = left_join(x,result)
View(combine)
View(combine)
View(result)
View(result)
View(x)
View(x)
diamonds_2 = transmute(diamondsmod, color, price, cut_new)
x = group_by(diamonds_2,color, cut_new)
result = summarise(x, meme = mean(price))
combine = left_join(x,result)
View(combine)
View(combine)
plot1 = ggplot(combine, aes(x = color, y = meme))
plot2 = plot1 + geom_boxplot()
plot2
plot2 = plot1 + geom_boxplot(factor = color)
plot1 = ggplot(combine, aes(x = factor(color) y = meme))
plot1 = ggplot(combine, aes(x = factor(color), y = meme))
plot2 = plot1 + geom_boxplot(factor = color)
plot2 = plot1 + geom_boxplot()
plot2
plot2 = plot1 + geom_boxplot(fill = "green")
plot2
plot2 = plot1 + geom_boxplot(fill = "green", color = "green")
plot2
plot3 = plot2 + + stat_summary(fun.data = "mean_cl_normal", colour = "blue", size=1)
plot3 = plot2 + stat_summary(fun.data = "mean_cl_normal", colour = "blue", size=1)
plot3
plot3 = plot2 + stat_summary()
plot3
fn1 = function(n){
if(n<0){
print("pos")
}
else{
print("neg")
}
}
fn1(5)
fn1 = function(n){
if(n>0){
print("pos")
}
else{
print("neg")
}
}
fn1(5)
fn1(-5)
install.packages("datasets")
install.packages("datasets")
install.packages("readxl")
install.packages("nlme")
setwd("~/GitHub/sleep-deprivation")
sleep.int1 <- read.table("sleep.txt", header = T, sep = "\t")
ibrary(openxlsx)
library(devtools)
library(export)
library(afex)
library(car)
library(lattice)
library(MASS)
library(effects)
library(doBy)
library(ggplot2)
library(ggthemes)
library(scales)
library(Rmisc)
library(stats)
library(easyGgplot2)
library(BayesTree)
library(UsingR)
library(Cluster)
library(Robustreg)
library(doBy)
library(reshape)
library(modeest)
library(qcc)
library(grid)
library(Hmisc)
library(tidyverse)
library(dplyr)
library(nycflights13)
sleep.int1 <- read.table("sleep.txt", header = T, sep = "\t")
View(sleep.int1)
View(sleep.int1)
#spaghettiplot
n = length(unique(Subject))
attach(sleep.int1)
#spaghettiplot
n = length(unique(Subject))
interaction.plot(Days, Subject, Reaction, xlab = "Days without sleep", ylab = "Reaction time")
interaction.plot(Days, Subject, Reaction, xlab = "Days without sleep", ylab = "Reaction time", legend=F)
interaction.plot(Days, Subject, Reaction, xlab = "Days with reduced sleep", ylab = "Reaction time", legend=F)
#descriptive statistics
##mean
sleep.mean= tapply(Reaction, Days, mean)
sleep.mean
#descriptive statistics
##mean
sleep.mean <- tapply(Reaction, Days, mean)
sleep.sd <- tapply(Reaction, Days, sd)
sleep.var <- tapply(Reaction, Days, var)
sleep.mean
sleep.sd
sleep.var
table(Reaction,Days)
boxplot(Reaction~Days, xlab = "Days with reduced sleep", ylab = "Reaction time (ms)")
#mean evolutions
errbar= function(x,y,height,width,lty=1,col="black")
arrows(x,y,x,y+height,angle=90,length=width,lty=lty,col=col)
arrows(x,y,x,y-height,angle=90,length=width,lty=lty,col=col)
#mean evolutions
errbar= function(x,y,height,width,lty=1,col="black")+
arrows(x,y,x,y+height,angle=90,length=width,lty=lty,col=col)+
arrows(x,y,x,y-height,angle=90,length=width,lty=lty,col=col)
plot(Days[Subject==1], sleep.mean[,2],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,1],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,9],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,10],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,1],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,2],type="b",xlim=c(0,9), ylim = c(100,500))
sleep.mean
plot(Days[Subject==1], sleep.mean[1,10],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==1], sleep.mean[,1],type="b",xlim=c(0,9), ylim = c(100,500))
plot(Days[Subject==308], sleep.mean[,1],type="b",xlim=c(0,9), ylim = c(100,500))
plot(age[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(age[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(age[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
plot(age[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(age[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)"))
plot(age[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)"
)
plot(Reaction[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
plot(Reaction[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
plot(Reaction[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2), ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F, main="Mean evolution (with 1 SE intervals)"
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2), ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F, main="Mean evolution (with 1 SE intervals)"
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2), ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F, main="Mean evolution (with 1 SE intervals)"
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2), ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F, main="Mean evolution (with 1 SE intervals)"
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(Days[Subject==308],sleep.mean[,1],type="b",xlim=c(1,2),
+ ylim=c(40,160),xlab="Age (in years)",ylab="IQ",axes=F,
+ main="Mean evolution (with 1 SE intervals)")
plot(sleep.mean)
sleep.sd
ggplot(sleep.int1, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd, ymax=len+sleep.sd), width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
ggplot(sleep.int1, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd, ymax=len+sleep.sd), width=.1) +
geom_line() +
geom_point()
sleep.sd
ggplot(sleep.mean, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd, ymax=len+sleep.sd), width=.1) +
geom_line() +
geom_point()
as.data.frame(do.call(rbind, sleep.mean))
bind_rows(lapply(sleep.mean, as.data.frame.list))
ggplot(sleep.mean, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd, ymax=len+sleep.sd), width=.1) +
geom_line() +
geom_point()
bind_rows(lapply(sleep.sd, as.data.frame.list))
ggplot(sleep.mean, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd, ymax=len+sleep.sd), width=.1) +
geom_line() +
geom_point()
sleep.mean.df <-bind_rows(lapply(sleep.sd, as.data.frame.list))
sleep.mean.df <-bind_rows(lapply(sleep.mean, as.data.frame.list))
ggplot(sleep.mean.df, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd.df, ymax=len+sleep.sd.df), width=.1) +
geom_line() +
geom_point()
sleep.sd.df <-bind_rows(lapply(sleep.sd, as.data.frame.list))
sleep.mean.df <-bind_rows(lapply(sleep.mean, as.data.frame.list))
ggplot(sleep.mean.df, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd.df, ymax=len+sleep.sd.df), width=.1) +
geom_line() +
geom_point()
ggplot(sleep.mean.df, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction.mean.df-sleep.sd.df, ymax=Reaction.mean.df+sleep.sd.df), width=.1) +
geom_line() +
geom_point()
ggplot(sleep.mean.df, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd.df, ymax=Reaction+sleep.sd.df), width=.1) +
geom_line() +
geom_point()
sleep.mean.df <-bind_rows(lapply(sleep.mean, as.data.frame.list))
ggplot(sleep.mean.df, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-sleep.sd, ymax=Reaction+sleep.sd), width=.1) +
geom_line() +
geom_point()
View(sleep.mean.df)
View(sleep.mean.df)
tgc <- summarySE(sleep.int1, measurevar="Reaction", groupvars="Days"
tgc
tgc <- summarySE(sleep.int1, measurevar="Reaction", groupvars="Days")
tgc
ggplot(tgc, aes(x=Days, y=Reaction)) +
geom_errorbar(aes(ymin=Reaction-se, ymax=Reaction+se), width=.1) +
geom_line() +
geom_point()
sleep.int2 <- reshape(sleep.int1, + timevar = "Days", idvar = "Subject", direction = "wide")
sleep.int2 <- reshape(sleep.int1, timevar = "Days", idvar = "Subject", direction = "wide")
sleep.int2
cor(sleep.int2)
cor(sleep.int2[,3:5])
cor(sleep.int2[,3:4])
cor(sleep.int2[,2:4])
cor(sleep.int2[,2:9])
cor(sleep.int2[,2:12])
cor(sleep.int2[,2:11])
cor(sleep.int2[,1:11])
cor(sleep.int2[,2:11])
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, Subject==x))))
Sx<- reorder(Subject, cf)
Sx<- reorder(Subject, cf[1,])
xyplot(Reaction~Days|Sx, data = sleep.int1)
lin.reg.coef1<- by(sleep.int1, Subject, function(data) coef(lm(Reaction~Days, data = sleep.int1)))
lin.reg.coef<- by(sleep.int1, Subject, function(data) coef(lm(Reaction~Days, data = sleep.int1)))
lin.reg.coef1 <- NULL
names(lin.reg.coef1)
lin.reg.coef2 = matrix(lin.reg.coef1, length(lin.reg.coef1)/2,2, byrow = T)
xyplot(Reaction~Days|Sx, data = sleep.int1)
lin.reg.coef<- by(sleep.int1, Subject, function(data) coef(lm(Reaction~Days, data = sleep.int1)))
lin.reg.coef1 <- unlist(lin.reg.coef)
lin.reg.coef1 <- NULL
names(lin.reg.coef1) <- NULL
lin.reg.coef2 = matrix(lin.reg.coef1, length(lin.reg.coef1)/2,2, byrow = T)
lin.reg.coef<- by(sleep.int1, Subject, function(data) coef(lm(Reaction~Days, data = sleep.int1)))
lin.reg.coef1 <- unlist(lin.reg.coef)
names(lin.reg.coef1) <- NULL
lin.reg.coef2 = matrix(lin.reg.coef1, length(lin.reg.coef1)/2,2, byrow = T)
lin.reg.coef<- by(sleep.int1, Subject, function(data) coef(lm(Reaction~Days, data = sleep.int1)))
View(lin.reg.coef)
View(lin.reg.coef)
lin.reg.coef1
lin.reg.coef <- by(sleep.int1, Subject, function(data) coef(lm(Reaction~Days, data = sleep.int1)))
View(lin.reg.coef)
View(lin.reg.coef)
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, Subject==x))))
View(cf)
View(cf)
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, id==x))))
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, subset=x))))
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, subset==x))))
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, Subject==x))))
View(cf)
View(cf)
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, Subject==x))))
View(cf)
View(cf)
cf<-sapply(Subject, function(x) + coef(lm(Reaction~Days, data = subset(sleep.int1, Subject==x))))
View(cf)
View(cf)
Sx<- reorder(Subject, cf[1,])
View(cf)
View(cf)
View(cf)
View(cf)
Sx<- reorder(Subject, cf[1,])
xyplot(Reaction~Days|Sx, data = sleep.int1)
lin.reg.coef <- by(sleep.int1, Subject, function(sleep.int1) coef(lm(Reaction~Days, data = sleep.int1)))
View(lin.reg.coef)
View(lin.reg.coef)
lin.reg.coef1 <- unlist(lin.reg.coef)
names(lin.reg.coef1) <- NULL
lin.reg.coef2 = matrix(lin.reg.coef1, length(lin.reg.coef1)/2,2, byrow = T)
xyplot(Reaction~Days|Sx, data = sleep.int1, type = c("p", "r"))
lin.reg.r.squared <- by(sleep.int1, Subject, function(sleep.int1) summary(lm(Reaction~Days, data = sleep.int1)))
lin.reg.r.squared
lin.reg.r.squared$r.squared
lin.reg.r.squared <- by(sleep.int1, Subject, function(sleep.int1) summary(lm(Reaction~Days, data = sleep.int1))$r.squared)
lin.reg.r.squared
lin.reg.r.squared1 <- as.vector(unlist(lin.reg.r.squared))
lin.reg.r.squared1
par(mfrow=c(3,1))
hist(lin.reg.coef2[,1], main = "individual intercepts")
hist(lin.reg.coef2[,2], main = "individual slopes")
hist(lin.reg.r.squared1, main = "r-squared")
